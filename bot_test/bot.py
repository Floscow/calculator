import logging
import re
from datetime import datetime
from telegram import Update, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from config import BOT_TOKEN
from database import add_user, save_calculation
from cbr_rates import get_interest_rates  # –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞–≤–æ–∫ –¶–ë –†–§
from credit import calculate_credit_payment


# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")


# –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    add_user(user.id, user.first_name)
    keyboard = [[KeyboardButton("üìä –†–∞—Å—á–µ—Ç –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏"), KeyboardButton("üìà –†–∞—Å—á–µ—Ç –ø–æ –≤–∫–ª–∞–¥—É")],
                [KeyboardButton("üí∞ –ö—Ä–µ–¥–∏—Ç–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä")],
                [KeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å"), KeyboardButton("üìú –û–ø–∏—Å–∞–Ω–∏–µ"), KeyboardButton("‚ùå –í—ã–π—Ç–∏")]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        f"üëã *–ü—Ä–∏–≤–µ—Ç, {user.first_name}!*\n"
        "üìå _–Ø —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä:_\n"
        "1Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –û–ø–∏—Å–∞–Ω–∏–µ.\n"
        "2Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∏–¥ —Ä–∞—Å—á–µ—Ç–∞.",
        parse_mode="Markdown",
        reply_markup=reply_markup
    )


# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        text = update.message.text.strip()
        logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {text}")

        commands = {
            "üìä –†–∞—Å—á–µ—Ç –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏": "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª. –ù–∞–ø—Ä–∏–º–µ—Ä: `10000 30`",
            "üìà –†–∞—Å—á–µ—Ç –ø–æ –≤–∫–ª–∞–¥—É": "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∏ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: `5000 12-06-2010`",
            "üí∞ –ö—Ä–µ–¥–∏—Ç–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä": "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—É—é —Å—Ç–∞–≤–∫—É –∏ —Å—Ä–æ–∫ –∫—Ä–µ–¥–∏—Ç–∞ (–≤ –º–µ—Å—è—Ü–∞—Ö) —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª. –ù–∞–ø—Ä–∏–º–µ—Ä: `50000 10 12`",
            "‚ÑπÔ∏è –ü–æ–º–æ—â—å": "üìå _–§–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞:_\n\n- `10000 30` (—Å—É–º–º–∞ –∏ –¥–Ω–∏)\n- `10000 8 30` (—Å—É–º–º–∞, —Å—Ç–∞–≤–∫–∞, –¥–Ω–∏)\n- `50000 10 12` (–∫—Ä–µ–¥–∏—Ç: —Å—É–º–º–∞, —Å—Ç–∞–≤–∫–∞ %, —Å—Ä–æ–∫ –º–µ—Å.)\n- `5000 12-06-2010` (—Å—É–º–º–∞ –∏ –¥–∞—Ç–∞ –Ω–∞—á–∞–ª–∞)",
            "üìú –û–ø–∏—Å–∞–Ω–∏–µ": "üìú *–û–ø–∏—Å–∞–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–æ–≤:*\n\n1Ô∏è‚É£ *–†–∞—Å—á–µ—Ç –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏* - –ø–æ —Å—Ç–∞–≤–∫–µ –≥–æ–¥–æ–≤—ã—Ö –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤.\n2Ô∏è‚É£ *–†–∞—Å—á–µ—Ç –ø–æ –≤–∫–ª–∞–¥—É* - —Å —É—á–µ—Ç–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å—Ç–∞–≤–∫–∏ –¶–ë.\n- `3Ô∏è‚É£ *–ö—Ä–µ–¥–∏—Ç–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä* - —Ä–∞—Å—á–µ—Ç –µ–∂–µ–º–µ—Å—è—á–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –ø–æ —Ñ–æ—Ä–º—É–ª–µ –∞–Ω–Ω—É–∏—Ç–µ—Ç–Ω–æ–≥–æ –∫—Ä–µ–¥–∏—Ç–∞.",
            "‚ùå –í—ã–π—Ç–∏": "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í–≤–µ–¥–∏—Ç–µ `/start` –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞."
        }

        if text in commands:
            await update.message.reply_text(commands[text], parse_mode="Markdown")
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ "—Å—É–º–º–∞ —Å—Ç–∞–≤–∫–∞ —Å—Ä–æ–∫"
        if re.match(r"^\d+\s+\d+(\.\d+)?\s+\d+$", text):
            amount, rate, months = map(float, text.split())
            payment = calculate_credit_payment(amount, rate, int(months))
            await update.message.reply_text(f"‚úÖ –í–∞—à –µ–∂–µ–º–µ—Å—è—á–Ω—ã–π –ø–ª–∞—Ç–µ–∂: `{payment:.2f}` —Ä—É–±.", parse_mode="Markdown")
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ "—Å—É–º–º–∞ –¥–Ω–∏"
        if re.match(r"^\d+\s+\d+$", text):
            amount, days = map(float, text.split())
            if amount <= 0 or days <= 0:
                raise ValueError("–ß–∏—Å–ª–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è")
            rate = get_interest_rates(datetime.now())[-1][1]
            debt = (amount * rate * days) / (100 * 365)
            save_calculation(update.message.from_user.id, amount, rate, days, debt)
            await update.message.reply_text(f"‚úÖ *–†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–∞—è –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å:* `{debt:.2f}` —Ä—É–±.", parse_mode="Markdown")
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ "—Å—É–º–º–∞ –¥–∞—Ç–∞"
        if re.match(r"^\d+\s+\d{2}-\d{2}-\d{4}$", text):
            amount, date_str = text.split()
            amount = float(amount)
            start_date = datetime.strptime(date_str, "%d-%m-%Y")
            interest_rates = get_interest_rates(start_date)
            if not interest_rates:
                raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞–≤–∫–∏ –¶–ë –†–§")
            current_date = datetime.now()
            debt, prev_date = amount, start_date
            for rate_date, rate in interest_rates:
                days = (rate_date - prev_date).days
                debt += (debt * rate * days) / (100 * 365)
                prev_date = rate_date
            debt += (debt * interest_rates[-1][1] * (current_date - prev_date).days) / (100 * 365)
            await update.message.reply_text(f"‚úÖ –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞ —Å –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º–∏: `{debt:.2f}` —Ä—É–±.", parse_mode="Markdown")
            return

        raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
    except ValueError as e:
        await update.message.reply_text(f"‚õî –û—à–∏–±–∫–∞: {e}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", parse_mode="Markdown")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞: {e}")
        await update.message.reply_text("‚õî –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", parse_mode="Markdown")


# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
def main():
    app = Application.builder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()


if __name__ == "__main__":
    main()
