import asyncio
import logging
from aiogram import Bot, Dispatcher, F, types
from aiogram.filters import CommandStart, Command
from aiogram.types import Message
from aiogram.enums import ParseMode
from aiogram.client.bot import DefaultBotProperties  # ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º —ç—Ç–æ!
from db import Database
import config as cfg
import keyboards as kb

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ –∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
bot = Bot(token=cfg.TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))  # ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ!
dp = Dispatcher()
db = Database('database.db')

# –ü—Ä–æ–≤–µ—Ä—è–µ–º ADMIN_USER_ID
ADMIN_USER_ID = getattr(cfg, "ADMIN_USER_ID", None)
if ADMIN_USER_ID is not None:
    ADMIN_USER_ID = int(ADMIN_USER_ID)
else:
    logging.warning("ADMIN_USER_ID –Ω–µ —É–∫–∞–∑–∞–Ω –≤ config.py")

logging.info(f"ADMIN_USER_ID = {ADMIN_USER_ID}")


# üìå –°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
@dp.message(CommandStart())
async def start(message: Message):
    if message.chat.type == 'private':
        if not db.user_exists(message.from_user.id):
            start_command = message.text
            referrer_id = start_command[7:] if len(start_command) > 7 else ""

            if referrer_id.isdigit():
                referrer_id = int(referrer_id)
                if referrer_id == message.from_user.id:
                    await message.answer("‚ùå –ù–µ–ª—å–∑—è —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø–æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π —Å—Å—ã–ª–∫–µ!")
                    return

                db.add_user(message.from_user.id, referrer_id)
                try:
                    await bot.send_message(referrer_id, "üîó –ü–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!")
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–µ—Ä—É: {e}")
            else:
                db.add_user(message.from_user.id)

    await message.answer(f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {message.from_user.first_name}!", reply_markup=kb.startMenu)

# üìå –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message(F.text == 'üìã –ü—Ä–æ—Ñ–∏–ª—å')
async def profile(message: Message):
    if message.chat.type == 'private':
        user_balance = db.get_balance(message.from_user.id)
        referrals = db.count_referrals(message.from_user.id)
        await message.answer(
            f'üÜî –¢–≤–æ–π ID: {message.from_user.id}\n'
            f'üîë –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: https://t.me/{cfg.BOT_NICKNAME}?start={message.from_user.id}\n'
            f'üë• –ö–æ–ª-–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {referrals}\n'
            f'üí∞ –ë–∞–ª–∞–Ω—Å: {user_balance} RUB'
        )

# üìå –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ú–æ–π VPN"
@dp.message(F.text == "üí† VPN")
@dp.message(Command("vpn"))
async def my_vpn_handler(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ú–æ–π VPN'"""
    await message.answer(
        "üåê –í–∞—à VPN-–∫–∞–±–∏–Ω–µ—Ç\n"
        "üîπ –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º VPN-–¥–æ—Å—Ç—É–ø–æ–º.\n"
        "üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫—É: https://example.com/vpn\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=kb.vpnMenu  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥–º–µ–Ω—é VPN
    )

# üìå –ö–æ–º–∞–Ω–¥–∞ "–î–æ–±–∞–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å"
@dp.message(Command("add_balance"))
async def add_balance_command(message: Message):
    try:
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –ø—ã—Ç–∞–µ—Ç—Å—è –¥–æ–±–∞–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å. ADMIN_USER_ID = {ADMIN_USER_ID}")

        if message.from_user.id != ADMIN_USER_ID:
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return

        args = message.text.split()
        if len(args) != 3:
            await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É —Ç–∞–∫: /add_balance ID –°–£–ú–ú–ê")
            return

        user_id, amount = args[1], args[2]

        if not user_id.isdigit():
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID!")
            return
        user_id = int(user_id)

        if not amount.replace(".", "", 1).isdigit():
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã!")
            return
        amount = float(amount)
        amount = int(amount) if amount.is_integer() else amount

        if amount <= 0:
            await message.answer("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0.")
            return

        if not db.user_exists(user_id):
            await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        db.add_balance(user_id, amount)
        await message.answer(f"‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É–≤–µ–ª–∏—á–µ–Ω –Ω–∞ {amount} RUB.")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

@dp.message(F.text == "üì• –°–∫–∞—á–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥")
async def download_vpn_config(message: Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é VPN"""
    await message.answer("üì• –í–æ—Ç —Ç–≤–æ–π –∫–æ–Ω—Ñ–∏–≥ –¥–ª—è IOS/Android: [–°–∫–∞—á–∞—Ç—å](https://example.com/config)", parse_mode="Markdown")
    await message.answer("üì• –í–æ—Ç —Ç–≤–æ–π –∫–æ–Ω—Ñ–∏–≥ –¥–ª—è PC: [–°–∫–∞—á–∞—Ç—å](https://example.com/config)", parse_mode="Markdown")

@dp.message(F.text == "üí≥ –ö—É–ø–∏—Ç—å VPN")
async def buy_vpn(message: Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ–∫—É–ø–∫—É VPN"""
    await message.answer("üí≥ –í—ã –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å VPN –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ:", reply_markup=kb.buyVpnInline)

@dp.message(F.text == "üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")
async def check_vpn_status(message: Message):
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ VPN"""
    user_id = message.from_user.id
    vpn_status = "üî¥ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞"  # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —á–µ—Ä–µ–∑ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await message.answer(f"üîÑ –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏: {vpn_status}")

@dp.message(F.text == "üîô –ù–∞–∑–∞–¥")
async def go_back(message: Message):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await message.answer("üîô –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=kb.startMenu)

# üìå –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    try:
        await bot.delete_webhook(drop_pending_updates=True)
        await dp.start_polling(bot)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ –±–æ—Ç–∞: {e}")

if __name__ == '__main__':
    asyncio.run(main())
